{"mappings":"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","sources":["src/js/hash-navigation.js","src/js/api.js","src/js/strip-display.js","src/js/navbar.js","src/js/index.js","src/js/strip-request-validation.js","src/js/transcript-parser.js"],"sourcesContent":["const QUERY_PARAMETER = \"n\";\r\n\r\nconst listeners = [];\r\nconst callListeners = () => listeners.forEach((listener) => listener());\r\n\r\nconst navigateTo = (address) => {\r\n  history.pushState(\r\n    null,\r\n    null,\r\n    address ? `?${QUERY_PARAMETER}=${encodeURIComponent(address)}` : \"?\"\r\n  );\r\n\r\n  callListeners();\r\n};\r\n\r\nconst redirectTo = (address) => {\r\n  history.replaceState(\r\n    null,\r\n    null,\r\n    address ? `?${QUERY_PARAMETER}=${encodeURIComponent(address)}` : \"?\"\r\n  );\r\n\r\n  callListeners();\r\n};\r\n\r\nconst onNavigate = (callback) => {\r\n  const listener = () => {\r\n    const address = new URL(location).searchParams.get(QUERY_PARAMETER) || \"\";\r\n    callback(address);\r\n  };\r\n\r\n  listeners.push(listener);\r\n  return () => listeners.filter((item) => item !== listener);\r\n};\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", callListeners);\r\nwindow.addEventListener(\"popstate\", callListeners);\r\n\r\nexport { navigateTo, redirectTo, onNavigate };\r\n","const PROXY_URL = \"https://thingproxy.freeboard.io/fetch/\";\r\nconst LATEST_STRIP_LIFETIME = 1000 * 60 * 5;\r\n\r\nlet latestStrip = null;\r\nlet latestStripTimestamp = Date.now();\r\n\r\nconst request = (url) => {\r\n  return fetch(`${PROXY_URL}${url}`)\r\n    .then((response) => response.json())\r\n    .catch(() => {\r\n      throw new Error(\"Failed to load comic data\");\r\n    });\r\n};\r\n\r\nconst getLatestStrip = () => {\r\n  const isLatestStripStale =\r\n    !latestStrip || Date.now() - latestStripTimestamp > LATEST_STRIP_LIFETIME;\r\n\r\n  if (isLatestStripStale) {\r\n    return request(\"https://xkcd.com/info.0.json\").then((strip) => {\r\n      latestStrip = strip;\r\n      latestStripTimestamp = Date.now();\r\n      return strip;\r\n    });\r\n  }\r\n  return Promise.resolve(latestStrip);\r\n};\r\n\r\nconst fetchStrip = (num) =>\r\n  num ? request(`https://xkcd.com/${num}/info.0.json`) : getLatestStrip();\r\n\r\nexport { fetchStrip, getLatestStrip };\r\n","import { parseTranscript } from \"./transcript-parser\";\r\n\r\nconst stripContainer = document.querySelector(\".strip\");\r\n\r\nconst transcriptToggleBtn = stripContainer.querySelector(\r\n  \".strip__btn-display-toggle\"\r\n);\r\nconst image = stripContainer.querySelector(\".strip__image\");\r\nconst transcriptContainer = stripContainer.querySelector(\".strip__transcript\");\r\nconst titleElement = stripContainer.querySelector(\".strip__title\");\r\nconst dateElement = stripContainer.querySelector(\".strip__date\");\r\nconst altTextElement = stripContainer.querySelector(\".strip__alt-text\");\r\nconst sourceLink = stripContainer.querySelector(\".strip__source-link\");\r\n\r\nconst updateDisplayedStrip = (stripData) => {\r\n  image.src = stripData.img;\r\n  transcriptContainer.innerHTML = parseTranscript(stripData.transcript);\r\n  titleElement.innerHTML = `#${stripData.num}: ${stripData.title}`;\r\n\r\n  const { year, month, day } = stripData;\r\n  const postedDate = new Date(year, month - 1, day);\r\n  dateElement.textContent = `Posted on ${postedDate.toLocaleDateString(\r\n    \"en-US\",\r\n    { month: \"long\", day: \"numeric\", year: \"numeric\" }\r\n  )}`;\r\n  altTextElement.textContent = stripData.alt;\r\n  sourceLink.href = `https://xkcd.com/${stripData.num}`;\r\n};\r\n\r\nconst toggleTranscript = () => {\r\n  image.classList.toggle(\"visually-hidden\");\r\n  transcriptContainer.classList.toggle(\"visually-hidden\");\r\n};\r\ntranscriptToggleBtn.addEventListener(\"click\", toggleTranscript);\r\n\r\nexport { updateDisplayedStrip };\r\n","import { navigateTo, onNavigate } from \"./hash-navigation\";\r\n\r\nconst navbar = document.querySelector(\".navigation\");\r\n\r\nconst links = navbar.querySelectorAll(\"a\");\r\nlinks.forEach((link) => {\r\n  link.addEventListener(\"click\", (evt) => {\r\n    evt.preventDefault();\r\n    navigateTo(new URL(link.href).searchParams.get(\"n\"));\r\n  });\r\n});\r\n\r\nconst firstLink = navbar.querySelector(\"[data-navlink-first]\");\r\nconst prevLink = navbar.querySelector(\"[data-navlink-prev]\");\r\nconst nextLink = navbar.querySelector(\"[data-navlink-next]\");\r\nconst latestLink = navbar.querySelector(\"[data-navlink-latest]\");\r\n\r\nconst updateNavbar = (displayedStripNum, latestStripNum) => {\r\n  if (displayedStripNum === 1) {\r\n    prevLink.removeAttribute(\"href\");\r\n    firstLink.removeAttribute(\"href\");\r\n  } else {\r\n    prevLink.href = `?n=${displayedStripNum - 1}`;\r\n    firstLink.href = \"?n=1\";\r\n  }\r\n\r\n  if (displayedStripNum === latestStripNum) {\r\n    nextLink.removeAttribute(\"href\");\r\n    latestLink.removeAttribute(\"href\");\r\n  } else {\r\n    nextLink.href = `?n=${displayedStripNum + 1}`;\r\n    latestLink.href = \"?\";\r\n  }\r\n};\r\n\r\nexport { updateNavbar };\r\n","import { redirectTo, onNavigate } from \"./hash-navigation\";\r\nimport { validateRequest } from \"./strip-request-validation\";\r\nimport { fetchStrip, getLatestStrip } from \"./api\";\r\nimport { updateDisplayedStrip } from \"./strip-display\";\r\n\r\nimport \"./navbar\";\r\nimport { updateNavbar } from \"./navbar\";\r\n\r\nonNavigate((address) => {\r\n  validateRequest(address).then((validAddress) => {\r\n    if (address !== validAddress) {\r\n      return redirectTo(validAddress);\r\n    }\r\n\r\n    fetchStrip(validAddress).then((strip) => {\r\n      updateDisplayedStrip(strip);\r\n      getLatestStrip().then((latestStrip) => {\r\n        displayedNum = strip.num;\r\n        latestNum = latestStrip.num;\r\n\r\n        updateNavbar(displayedNum, latestNum);\r\n      });\r\n    });\r\n  });\r\n});\r\n","import { getLatestStrip } from \"./api\";\r\n\r\nconst validateRequest = (address) => {\r\n  return getLatestStrip().then(({ num: maxNum }) => {\r\n    const requestedNumber = parseInt(address);\r\n    const isRequestedNumberValid =\r\n      !isNaN(requestedNumber) &&\r\n      requestedNumber >= 1 &&\r\n      requestedNumber <= maxNum;\r\n\r\n    if (isRequestedNumberValid) {\r\n      return address;\r\n    } else if (address === \"random\") {\r\n      return Math.floor(Math.random() * maxNum + 1).toString();\r\n    } else {\r\n      return \"\";\r\n    }\r\n  });\r\n};\r\n\r\nexport { validateRequest };\r\n","const parseTranscript = (rawText) => {\r\n  if (!rawText) {\r\n    return \"<em>No transcript available</em>\";\r\n  }\r\n\r\n  return (\r\n    rawText\r\n      // remove the alt-text transcript, as it's handled separately\r\n      .replace(/{{.*([aA]lt|[tT]ext):.*}}/, \"\")\r\n      .trim()\r\n\r\n      // escape angle brackets\r\n      .replaceAll(/(?<!\\<)\\<(?!\\<)/g, \"&lt;\")\r\n      .replaceAll(/(?<!\\>)\\>(?!\\>)/g, \"&gt;\")\r\n\r\n      .replaceAll(/\\<\\<([\\w\\W]*?)\\>\\>/g, \"<code>$1</code>\")\r\n      .replaceAll(/\\[\\[([\\w\\W]*?)\\]\\]/g, \"<strong>$1</strong>\")\r\n      .replaceAll(/\\(\\(([\\w\\W]*?)\\)\\)/g, \"<em>$1</em>\")\r\n\r\n      //split into paragraphs\r\n      .split(\"\\n\\n\")\r\n      // replace single newlines with breaks\r\n      .map((p) => `<p>${p.replaceAll(\"\\n\", \"<br>\")}</p>`)\r\n      .join(\"\")\r\n  );\r\n};\r\n\r\nexport { parseTranscript };\r\n"],"names":["$7334451a9ab23ac9fbd90866c1fe7633$var$listeners","$7334451a9ab23ac9fbd90866c1fe7633$var$callListeners","forEach","listener","window","addEventListener","$0ba2476125d7cfbe3193335e791dc9f3$var$latestStrip","$0ba2476125d7cfbe3193335e791dc9f3$var$latestStripTimestamp","Date","now","$0ba2476125d7cfbe3193335e791dc9f3$var$request","url","fetch","then","response","json","catch","Error","$0ba2476125d7cfbe3193335e791dc9f3$export$581bd11f00dd1ff3","strip","Promise","resolve","$1b66648b66839f54841193ac7cfc2585$var$stripContainer","document","querySelector","$1b66648b66839f54841193ac7cfc2585$var$transcriptToggleBtn","$1b66648b66839f54841193ac7cfc2585$var$image","$1b66648b66839f54841193ac7cfc2585$var$transcriptContainer","$1b66648b66839f54841193ac7cfc2585$var$titleElement","$1b66648b66839f54841193ac7cfc2585$var$dateElement","$1b66648b66839f54841193ac7cfc2585$var$altTextElement","$1b66648b66839f54841193ac7cfc2585$var$sourceLink","classList","toggle","$c510b358cf3a245a2fdcc302853f7824$var$navbar","querySelectorAll","link","evt","address","preventDefault","URL","href","searchParams","get","history","pushState","encodeURIComponent","$c510b358cf3a245a2fdcc302853f7824$var$firstLink","$c510b358cf3a245a2fdcc302853f7824$var$prevLink","$c510b358cf3a245a2fdcc302853f7824$var$nextLink","$c510b358cf3a245a2fdcc302853f7824$var$latestLink","callback","location","push","$7334451a9ab23ac9fbd90866c1fe7633$export$bb70a2fd7e89621e","num","maxNum","requestedNumber","parseInt","isNaN","Math","floor","random","toString","$6e52ebfddb4d9ea68dabb34f6bc739fb$export$aa22d096f844c1e4","validAddress","replaceState","$7334451a9ab23ac9fbd90866c1fe7633$export$e594b896e7501ad7","stripData","rawText","src","img","innerHTML","transcript","replace","trim","replaceAll","split","map","p","join","title","year","month","day","postedDate","textContent","toLocaleDateString","alt","$1b66648b66839f54841193ac7cfc2585$export$256f881168341e62","latestStrip","displayedStripNum","latestStripNum","displayedNum","latestNum","removeAttribute"],"version":3,"file":"index.29389fe7.js.map"}